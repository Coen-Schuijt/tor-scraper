#!/usr/bin/env python3

import os
import sys
import argparse
import matplotlib.pyplot as plt

def parse_args():
    """
    Parses the arguments from the command line.
    Defaults to './parsed/'
    """
    parser = argparse.ArgumentParser(description='Script to parse the onion files generated by the onion_scraper script.')
    parser.add_argument('--parsed-directory','-p', required=True, type=str, help='Relative path to file with urls to parse')
    args = parser.parse_args()
    if not args.parsed_directory.endswith('/'):
        args.parsed_directory += '/'
        if not args.parsed_directory.startswith('./'):
            args.parsed_directory = './' + args.parsed_directory 
    print('[ INFO  ] : Using [{}] as parsed_directory'.format(args.parsed_directory))
    return args.parsed_directory

def check_directory(parsed_dir):
    """
    Checks if the given directory exists.
    If not, raises an error and exits.
    """
    cwd = os.getcwd()
    print('[ INFO  ] : Current directory [{}]'.format(cwd))
    print('[ INFO  ] : Checking existence of [{}]'.format(parsed_dir))
    if os.path.exists(parsed_dir):
        print('[ INFO  ] : Directory [{}] exists'.format(parsed_dir))
    else:
        print('[ ERROR ] : Directory [{}] does not exsist.'.format(parsed_dir))
        sys.exit(1)
    return

def create_domain_list(directory):
    """
    Creates a list of unique domain names from parsed directory.
    """
    print('[ INFO  ] : Generating list of unique domains for [{d}]'.format(d=directory))
    domain_list = []
    for parsed_file in os.listdir(directory):
        domain = parsed_file.split('_')[1]
        if domain == 'github.com':
            domain = domain + '_' + parsed_file.split('_')[2]
        if not domain in domain_list:
            domain_list.append(domain)
    return domain_list

def group_domains(domain_list,directory):
    """
    Creates a set for each domain name.
    Adds the file for same domain with different dates to that set.
    """
    print('[ INFO  ] : Creating sets of files with same domain name')
    domain_sets = []
    for domain in domain_list:
        domain_set = set()
        for parsed_file in os.listdir(directory):
            if domain in parsed_file:
                domain_set.add(parsed_file)
        domain_sets.append(domain_set)
    return domain_sets

def generate_growth_sets(domain_list,directory,domain_sets):
    """
    Parses the data of all the files in the directory into the following format:
    [ ['domain name'] , ['File_1','File_2','File_n'] , ['Count_1','Count_2','Count_n'] ]
    """
    print('[ INFO  ] : Parsing content of files')
    master_list = []
    for e,domain in enumerate(domain_list):
        sub_list = []
        sub_list.append(domain) 
        for i,domain_set in enumerate(domain_sets):
            if i == e:
                x_list = []
                y_list = []
                for parsed_file in domain_set:
                    x = parsed_file.split('_')[0]
                    y = 0
                    with open(directory+parsed_file, 'r') as r_file:
                        data = r_file.readlines()
                        for _ in data:
                            y+=1
                    x_list.append(x)
                    y_list.append(y)
                sub_list.append(x_list)
                sub_list.append(y_list)
        master_list.append(sub_list)
    return master_list

def plot_growth(growth_data):
    """
    Parses the contents of the growth_set and plots it.
    Measures growth rate over time.
    """
    print('[ INFO  ] : Plotting data')
    print('[ INFO  ] : Saving plot to [./Growth_plot.png]')
    fix = plt.figure()
    ax = plt.subplot(111)
    for n,sample in enumerate(growth_data):
        l = []
        x = []
        y = []
        for e,subsample in enumerate(sample):
            if e == 0:
                #print(subsample)
                l.append(subsample)
            elif e == 1:
                for item in subsample:
                    #print('x',e,item)
                    x.append(item)
            elif e == 2:
                for item in subsample:
                    #print('y:',e,item)
                    y.append(item)
        x,y = (list(t) for t in (zip(*sorted(zip(x,y)))))
        ax.plot(x,y,label=l)
    plt.title('Size of onion lists over time')
    box = ax.get_position()
    ax.set_position([box.x0, box.y0, box.width*0.75, box.height])
    legend = ax.legend(loc='center left', bbox_to_anchor=(1,0.5))
    plt.xlabel('Date')
    plt.xticks(rotation=45)
    plt.ylabel('#Sites')
    plt.savefig('./Growth_plot.png', bbox_extra_artists=(legend,), bbox_inches='tight')

def main():
    parsed_directory = parse_args()

    #print('[ INFO  ] : Using [{}] as parsed_directory'.format(parsed_directory))
    cwd = check_directory(parsed_directory)
    domain_list = create_domain_list(parsed_directory)
    domain_sets = group_domains(domain_list,parsed_directory)
    growth_set = generate_growth_sets(domain_list,parsed_directory,domain_sets)
    plot_growth(growth_set)

if __name__ == "__main__":
    main()
